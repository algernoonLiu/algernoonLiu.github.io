<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿尔杰农青年</title>
  <subtitle>爱生活爱编码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://algernoonliu.github.io/"/>
  <updated>2017-07-07T07:16:33.210Z</updated>
  <id>https://algernoonliu.github.io/</id>
  
  <author>
    <name>algernoon青年</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ActiveMQ学习笔记(一)</title>
    <link href="https://algernoonliu.github.io/2017/07/07/ActiveMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>https://algernoonliu.github.io/2017/07/07/ActiveMQ学习笔记-一/</id>
    <published>2017-07-07T07:16:33.000Z</published>
    <updated>2017-07-07T07:16:33.210Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DelayedQueue学习笔记</title>
    <link href="https://algernoonliu.github.io/2017/07/05/DelayedQueue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://algernoonliu.github.io/2017/07/05/DelayedQueue学习笔记/</id>
    <published>2017-07-05T08:59:42.000Z</published>
    <updated>2017-07-05T09:01:02.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  <code>DelayQueue</code>是<code>java.util.concurrent</code>中提供的一个很有意思的类。本文将会对<code>DelayQueue</code>做一个介绍，然后列举应用场景。并且提供一个<code>Delayed</code>接口的实现和 Sample 代码。</p>
<p>  <code>DelayQueue</code>是一个无界的<code>BlockingQueue</code>，用于放置实现了<code>Delayed</code>接口的对象，其中的对象只能在其到期时才能从队列中取走。这种队列是有序的，即队头对象的延迟到期时间最长。注意：不能将null元素放置到这种队列中。</p>
<p>  <strong>Delayed</strong>，一种混合风格的接口，用来标记那些应该在给定延迟时间之后执行的对象。Delayed扩展了<code>Comparable</code>接口，比较的基准为延时的时间值，<code>Delayed</code>接口的实现类getDelay的返回值应为固定值（<code>final</code>）。<code>DelayQueue</code>内部是使用<code>PriorityQueue</code>实现的。</p>
<h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h3><p>  <code>DelayQueue</code>阻塞队列在我们系统开发中也常常会用到，例如：缓存系统的设计，缓存中的对象，超过了空闲时间，需要从缓存中移出；任务调度系统，能够准确的把握任务的执行时间。我们可能需要通过线程处理很多时间上要求很严格的数据，如果使用普通的线程，我们就需要遍历所有的对象，一个一个的检查看数据是否过期等，首先这样在执行上的效率不会太高，其次就是这种设计的风格也大大的影响了数据的精度。一个需要12:00点执行的任务可能12:01才执行,这样对数据要求很高的系统有更大的弊端。由此我们可以使用<code>DelayQueue</code>。</p>
<p>  我们在网咖或者网吧上网时会用到一个网吧综合系统，其中有一个主要功能就是给每一位网民计时，用户充值一定金额会有相应的上网时常，这里我们用DelayQueue模拟实现一下：</p>
<p>  用<code>DelayQueue</code>存储网民（<code>Wangmin</code>类），每一个考生都有自己的名字和完成试卷的时间，<code>Wangba</code>线程对<code>DelayQueue</code>进行监控，从队列中取出到时间的网民执行下机操作。</p>
<p>  实现了<code>Delayed</code>接口的网民类</p>
<pre><code>public class Wangmin implements Delayed {  

    private String name;  
    //身份证  
    private String id;  
    //截止时间  
    private long endTime;  
    //定义时间工具类
    private TimeUnit timeUnit = TimeUnit.SECONDS;

    public Wangmin(String name,String id,long endTime){  
        this.name=name;  
        this.id=id;  
        this.endTime = endTime;  
    }  

    public String getName(){  
        return this.name;  
    }  

    public String getId(){  
        return this.id;  
    }  

    /** 
     * 用来判断是否到了截止时间 
     */  
    @Override  
    public long getDelay(TimeUnit unit) { 
        //return unit.convert(endTime, TimeUnit.MILLISECONDS) - unit.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);
        return endTime - System.currentTimeMillis();
    }  

    /** 
     * 相互批较排序用 
     */  
    @Override  
    public int compareTo(Delayed delayed) {  
        Wangmin w = (Wangmin)delayed;  
        return this.getDelay(this.timeUnit) - w.getDelay(this.timeUnit) &gt; 0 ? 1:0;  
    }    
}
</code></pre><p>  网吧类</p>
<pre><code>public class WangBa implements Runnable {  

    private DelayQueue&lt;Wangmin&gt; queue = new DelayQueue&lt;Wangmin&gt;();  

    public boolean yingye =true;  

    /**
     * 上机 
     */
    public void shangji(String name,String id,int money){  
        Wangmin man = new Wangmin(name, id, 1000 * money + System.currentTimeMillis());  
        System.out.println(&quot;网名&quot;+man.getName()+&quot; 身份证&quot;+man.getId()+&quot;交钱&quot;+money+&quot;块,开始上机...&quot;);  
        this.queue.add(man);  
    }  

    // 下机
    public void xiaji(Wangmin man){  
        System.out.println(&quot;网名&quot;+man.getName()+&quot; 身份证&quot;+man.getId()+&quot;时间到下机...&quot;);  
    }  

    @Override  
    public void run() {  
        while(yingye){  
            try {  
                Wangmin man = queue.take();  
                xiaji(man);  
            } catch (InterruptedException e) {  
                e.printStackTrace();  
            }  
        }  
    }  

    public static void main(String args[]){  
        try{  
            System.out.println(&quot;网吧开始营业&quot;);  
            WangBa siyu = new WangBa();  
            Thread shangwang = new Thread(siyu);  
            shangwang.start();  

            siyu.shangji(&quot;路人甲&quot;, &quot;123&quot;, 1);  
            siyu.shangji(&quot;路人乙&quot;, &quot;234&quot;, 10);  
            siyu.shangji(&quot;路人丙&quot;, &quot;345&quot;, 5);  
        }  
        catch(Exception e){  
            e.printStackTrace();
        }  

    }  
}
</code></pre><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>  首先看一下<code>DlayedQueue</code>源码</p>
<pre><code>public class DelayQueue&lt;E extends Delayed&gt; extends AbstractQueue&lt;E&gt;
implements BlockingQueue&lt;E&gt; {

    private final transient ReentrantLock lock = new ReentrantLock();
    private final PriorityQueue&lt;E&gt; q = new PriorityQueue&lt;E&gt;();

    // ...

}
</code></pre><p>  这是一小部分源码，从这段源码可以看出，DelayedQueue中处理的是实现Delayed接口的任务，DelayedQueue使用lock来实现线程同步，使用PriorityQueue来管理任务。那么Delayed接口是什么呢？</p>
<pre><code>public interface Delayed extends Comparable&lt;Delayed&gt; {

    long getDelay(TimeUnit unit);
}
</code></pre><p>  这是<code>Delayed</code>接口的官方注释，意思是：一个混合风格的接口，为创建给定延迟的任务。（翻译的不太好，请纠正）；其中有两个重要的方法compareTo和getDelay，第一个是比较两个任务的延迟时间进行排序，第二个方法用来获取延迟时间。</p>
<p>  <code>priorityQueue</code>是一种优先级队列，这里优先级就是延迟时间，也就是说进入队列的任务安装优先级进行排序，延迟时间最短的在队列前面，先被处理，也就是说，每次从队列中取出的任务都将是到期的任务。比如我们实现一个缓存，当某个key-value对超期了，我们就可以从队列前取出，然后进行销毁操作。</p>
<p>  这里有一个实现缓存的例子，链接如下：<br>  <a href="http://www.cnblogs.com/jobs/archive/2007/04/27/730255.html" target="_blank" rel="external">http://www.cnblogs.com/jobs/archive/2007/04/27/730255.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;  &lt;code&gt;DelayQueue&lt;/code&gt;是&lt;code&gt;java.util.concurrent&lt;/code&gt;中提供的一个很有意思的
    
    </summary>
    
      <category term="java基础" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="DelayedQueue" scheme="https://algernoonliu.github.io/tags/DelayedQueue/"/>
    
      <category term="多线程" scheme="https://algernoonliu.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch学习笔记</title>
    <link href="https://algernoonliu.github.io/2017/07/04/CountDownLatch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://algernoonliu.github.io/2017/07/04/CountDownLatch学习笔记/</id>
    <published>2017-07-04T10:53:05.000Z</published>
    <updated>2017-07-04T10:54:29.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>正如每个Java文档所描述的那样，<strong>CountDownLatch</strong>是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后  再  执行。在Java并发中，<strong>countdownlatch</strong>的概念是一个常见的面试题，所以一定要确保你很好的理解了它。在这篇文章中，我将会涉及到在Java并发编程中跟<strong>CountDownLatch</strong>相关的以下几点：</p>
</blockquote>
<ul>
<li><strong>CountDownLatch</strong> 是什么？</li>
<li><strong>CountDownLatch</strong> 如何工作？</li>
<li>在实时系统中的应用场景</li>
<li>应用范例</li>
<li>常见的面试题</li>
</ul>
<h6 id="CountDownLatch是什么"><a href="#CountDownLatch是什么" class="headerlink" title="CountDownLatch是什么"></a>CountDownLatch是什么</h6><p><strong>CountDownLatch</strong>是在java1.5被引入的，跟它一起被引入的并发工具类还有<strong>CyclicBarrier</strong>、<strong>Semaphore</strong>、<strong>ConcurrentHashMap</strong>和<strong>BlockingQueue</strong>，它们都存在于<code>java.util.concurrent</code>包下。<strong>CountDownLatch</strong>这个类能够使一个线程等待其他线程完成各自的工作后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有的框架服务之后再执行。</p>
<p><strong>CountDownLatch</strong>是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就会减1。当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</p>
<p><img src="http://orzbqmb0f.bkt.clouddn.com/countdownlatch.png" alt=""></p>
<p><strong>CountDownLatch</strong>的伪代码如下所示：</p>
<pre><code>//Main thread start
//Create CountDownLatch for N threads
//Create and start N threads
//Main thread wait on latch
//N threads completes there tasks are returns
//Main thread resume execution
</code></pre><h6 id="CountDownLatch如何工作"><a href="#CountDownLatch如何工作" class="headerlink" title="CountDownLatch如何工作"></a>CountDownLatch如何工作</h6><p>CountDownLatch.java类中定义的构造函数：</p>
<pre><code>public CountDownLatch(int count) {
    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);
    this.sync = new Sync(count);
}
</code></pre><p>构造器中的<strong>计数值（count）实际上就是闭锁需要等待的线程数量。</strong>这个值只能被设置一次，而且<strong>CountDownLatch没有提供任何机制去重新设置这个计数值</strong>。</p>
<p>与<strong>CountDownLatch</strong>的第一次交互是主线程等待其他线程。主线程必须在启动其他线程后立即调用<code>CountDownLatch.await()</code>方法。这样主线程的操作就会在这个方法上阻塞，直到其他线程完成各自的任务。</p>
<p>其他N 个线程必须引用闭锁对象，因为他们需要通知<strong>CountDownLatch</strong>对象，他们已经完成了各自的任务。这种通知机制是通过 <code>CountDownLatch.countDown()</code>方法来完成的；每调用一次这个方法，在构造函数中初始化的count值就减1。所以当N个线程都调 用了这个方法，count的值等于0，然后主线程就能通过await()方法，恢复执行自己的任务。</p>
<h6 id="在实时系统中的使用场景"><a href="#在实时系统中的使用场景" class="headerlink" title="在实时系统中的使用场景"></a>在实时系统中的使用场景</h6><p>让我们尝试罗列出在java实时系统中<strong>CountDownLatch</strong>都有哪些使用场景。我所罗列的都是我所能想到的。如果你有别的可能的使用方法，请在留言里列出来，这样会帮助到大家。</p>
<blockquote>
<p><strong>1.实现最大的并行性：</strong>有时我们想同时启动多个线程，实现最大程度的并行性。例如，我们想测试一个单例类。如果我们创建一个初始计数为1的<strong>CountDownLatch</strong>，并让所有线程都在这个锁上等待，那么我们可以很轻松地完成测试。我们只需调用 一次<code>countDown()</code>方法就可以让所有的等待线程同时恢复执行。</p>
<p><strong>2.开始执行前等待n个线程完成各自任务：</strong>例如应用程序启动类要确保在处理用户请求前，所有N个外部系统已经启动和运行了。</p>
<p><strong>3.死锁检测：</strong>一个非常方便的使用场景是，你可以使用n个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。</p>
</blockquote>
<h6 id="CountDownLatch使用例子"><a href="#CountDownLatch使用例子" class="headerlink" title="CountDownLatch使用例子"></a>CountDownLatch使用例子</h6><p>在这个例子中，我模拟了一个应用程序启动类，它开始时启动了n个线程类，这些线程将检查外部系统并通知闭锁，并且启动类一直在闭锁上等待着。一旦验证和检查了所有外部服务，那么启动类恢复执行。</p>
<p><strong>BaseHealthChecker.java</strong>：这个类是一个Runnable，负责所有特定的外部服务健康的检测。它删除了重复的代码和闭锁的中心控制代码。</p>
<pre><code>public abstract class BaseHealthChecker implements Runnable {

    private CountDownLatch _latch;
    private String _serviceName;
    private boolean _serviceUp;

    //Get latch object in constructor so that after completing the task, thread can countDown() the latch
    public BaseHealthChecker(String serviceName, CountDownLatch latch) {
        super();
        this._latch = latch;
        this._serviceName = serviceName;
        this._serviceUp = false;
    }

    @Override
    public void run() {
        try {
            verifyService();
            _serviceUp = true;
        } catch (Throwable t) {
            t.printStackTrace(System.err);
            _serviceUp = false;
        } finally {
            if(_latch != null) {
                _latch.countDown();
            }
        }
    }

    public String getServiceName() {
        return _serviceName;
    }

    public boolean isServiceUp() {
        return _serviceUp;
    }
    //This methos needs to be implemented by all specific service checker
    public abstract void verifyService();
}
</code></pre><p><strong>NetworkHealthChecker.java</strong>：这个类继承了BaseHealthChecker，实现了verifyService()方法。<strong>DatabaseHealthChecker.java</strong>和<strong>CacheHealthChecker.java</strong>除了服务名和休眠时间外，与NetworkHealthChecker.java是一样的。</p>
<pre><code>public class NetworkHealthChecker extends BaseHealthChecker {
    public NetworkHealthChecker (CountDownLatch latch) {
        super(&quot;Network Service&quot;, latch);
    }

    @Override
    public void verifyService() {
        System.out.println(&quot;Checking &quot; + this.getServiceName());
        try {
            Thread.sleep(7000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(this.getServiceName() + &quot; is UP&quot;);
    }
}
</code></pre><p><strong>ApplicationStartupUtil.java</strong>：这个类是一个主启动类，它负责初始化闭锁，然后等待，直到所有服务都被检测完。</p>
<pre><code>public class ApplicationStartupUtil {
    //List of service checkers
    private static List&lt;BaseHealthChecker&gt; _services;

    //This latch will be used to wait on
    private static CountDownLatch _latch;

    private ApplicationStartupUtil() {}

    private final static ApplicationStartupUtil INSTANCE = new ApplicationStartupUtil();

    public static ApplicationStartupUtil getInstance() {
        return INSTANCE;
    }

    public static boolean checkExternalServices() throws Exception {
        //Initialize the latch with number of service checkers
        _latch = new CountDownLatch(3);

        //All add checker in lists
        _services = new ArrayList&lt;BaseHealthChecker&gt;();
        _services.add(new NetworkHealthChecker(_latch));
        _services.add(new CacheHealthChecker(_latch));
        _services.add(new DatabaseHealthChecker(_latch));

        //Start service checkers using executor framework
        Executor executor = Executors.newFixedThreadPool(_services.size());

        for(final BaseHealthChecker v : _services) {
            executor.execute(v);
        }

        //Now wait till all services are checked
        _latch.await();

        //Services are file and now proceed startup
        for(final BaseHealthChecker v : _services) {
            if( ! v.isServiceUp()) {
                return false;
            }
        }
        return true;
    }
}
</code></pre><p>现在你可以写测试代码去检测一下闭锁的功能了。</p>
<pre><code>public class Main {
    public static void main(String[] args) {
        boolean result = false;
        try {
            result = ApplicationStartupUtil.checkExternalServices();
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(&quot;External services validation completed !! Result was :: &quot;+ result);
    }
}
</code></pre><p>输出结果：</p>
<pre><code>Checking Network Service
Checking Cache Service
Checking Database Service
Database Service is UP
Cache Service is UP
Network Service is UP
External services validation completed !! Result was :: true
</code></pre><h6 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h6><p>可以为你的下次面试准备以下一些<strong>CountDownLatch</strong>相关的问题：</p>
<ul>
<li>解释一下 <strong>CountDownLatch</strong> 概念?</li>
<li><strong>CountDownLatch</strong> 和 <strong>CyclicBarrier</strong> 的不同之处?</li>
<li>给出一些 <strong>CountDownLatch</strong> 使用的例子?</li>
<li><strong>CountDownLatch</strong> 类中主要的方法?</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正如每个Java文档所描述的那样，&lt;strong&gt;CountDownLatch&lt;/strong&gt;是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后  再  执行。在Java并发中，&lt;strong&gt;countdownlatch
    
    </summary>
    
      <category term="java基础" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://algernoonliu.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="CountDownLatch" scheme="https://algernoonliu.github.io/tags/CountDownLatch/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal解决SimpleDateFormat线程安全问题</title>
    <link href="https://algernoonliu.github.io/2017/07/04/ThreadLocal%E8%A7%A3%E5%86%B3SimpleDateFormat%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://algernoonliu.github.io/2017/07/04/ThreadLocal解决SimpleDateFormat线程安全问题/</id>
    <published>2017-07-04T10:49:25.000Z</published>
    <updated>2017-07-04T10:50:06.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>SimpleDateFormat(下面简称sdf)类内部有一个Calendar对象引用，它用来储存和这个sdf相关的日期信息，例如<code>sdf.parse(dateStr)</code>， <code>sdf.format(date)</code>诸如此类的方法参数传入的日期相关String，Date等等，都是交友Calendar引用来储存的。这样就会导致一个问题，如果你的sdf是个static的，那么多个thread 之间就会共享这个sdf，同时也是共享这个Calendar引用，并且，观察<code>sdf.parse()</code>方法，你会发现有如下的调用：</p>
<pre><code>Date parse() {
  calendar.clear(); // 清理calendar
  ... // 执行一些操作, 设置 calendar 的日期什么的
  calendar.getTime(); // 获取calendar的时间
}
</code></pre><p>这里会导致的问题就是，如果线程A调用了<code>sdf.parse()</code>，并且进行了<code>calendar.clear()</code>后还未执行<code>calendar.getTime()</code>的时候，线程B又调用了<code>sdf.parse()</code>，这时候线程B也执行了<code>sdf.clear()</code>方法，这样就导致线程 A 的的calendar数据被清空了(实际上A，B的同时被清空了)。又或者当 A 执行了<code>calendar.clear()</code>后被挂起，这时候 B 开始调用<code>sdf.parse()</code>并顺利结束，这样 A 的 calendar内存储的的date 变成了后来 B 设置的calendar的date。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>最简单的解决方案我们可以把static去掉，这样每个新的线程都会有一个自己的sdf实例，从而避免线程安全的问题。然而，使用这种方法，在高并发的情况下会大量的<code>new sdf</code>以及销毁sdf，这样是非常耗费资源的，所以是不可行的。</p>
<p>另外一种方法可以使用Threadlocal解决此问题，对于每个线程SimpleDateFormat不存在影响他们之间协作的状态，为每个线程创建一个SimpleDateFormat变量的拷贝或者叫做副本，代码如下：</p>
<pre><code>/** 
 * 使用ThreadLocal以空间换时间解决SimpleDateFormat线程安全问题。 
 */  
public class DateUtil {  

    private static final String DATE_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;  

    @SuppressWarnings(&quot;rawtypes&quot;)  
    private static ThreadLocal threadLocal = new ThreadLocal() {  
        protected synchronized Object initialValue() {  
            return new SimpleDateFormat(DATE_FORMAT);  
        }  
    };  

    public static DateFormat getDateFormat() {  
        return (DateFormat) threadLocal.get();  
    }  

    public static Date parse(String textDate) throws ParseException {  
        return getDateFormat().parse(textDate);  
    }  
}
</code></pre><p> 创建一个ThreadLocal类变量，这里创建时用了一个匿名类，覆盖了initialValue方法，主要作用是创建时初始化实例，也可以采用下面方式创建。</p>
<pre><code>//第一次调用get将返回null  
private static ThreadLocal threadLocal = new ThreadLocal()；  
//获取线程的变量副本，如果不覆盖initialValue，第一次get返回null，故需要初始化一个SimpleDateFormat，并set到threadLocal中  
public static DateFormat getDateFormat() {  
    DateFormat df = (DateFormat) threadLocal.get();  
    if(df==null){
        df = new SimpleDateFormat(DATE_FORMAT)  
        threadLocal.set(df);  
    }  
    return df;  
}
</code></pre><p>通过以上方式，每个线程会实例化一个SimpleDateFormat实例，实例在线程内共享，达到了解决线程安全性的问题，一定程度上也提高了性能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原因分析&quot;&gt;&lt;a href=&quot;#原因分析&quot; class=&quot;headerlink&quot; title=&quot;原因分析&quot;&gt;&lt;/a&gt;原因分析&lt;/h3&gt;&lt;p&gt;SimpleDateFormat(下面简称sdf)类内部有一个Calendar对象引用，它用来储存和这个sdf相关的日期信息
    
    </summary>
    
      <category term="java基础" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://algernoonliu.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="ThreadLocal" scheme="https://algernoonliu.github.io/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal深入理解</title>
    <link href="https://algernoonliu.github.io/2017/06/30/ThreadLocal%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>https://algernoonliu.github.io/2017/06/30/ThreadLocal深入理解/</id>
    <published>2017-06-30T08:38:49.000Z</published>
    <updated>2017-06-30T09:00:06.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ThreadLocal概述"><a href="#ThreadLocal概述" class="headerlink" title="ThreadLocal概述"></a>ThreadLocal概述</h3><p>学习一个东西首先要知道为什么要引入它，就是我们能用它来干什么。所以我们先来看看ThreadLocal对我们到底有什么用，然后再来看看它的实现原理。</p>
<p>ThreadLocal如果单纯从名字上来看像是“本地线程”这么个意思，只能说这个名字起的确实不太好，很容易让人产生误解，ThreadLocalVariable（线程本地变量）应该是个更好的名字。我们先看一下官方对ThreadLocal的描述：</p>
<pre><code>This class provides thread-local variables.  These variables differ from their normal counterparts in that each
thread that accesses one (via its {@code get} or {@code set} method) has its own, independently initialized
copy of the variable.  {@code ThreadLocal} instances are typically private static fields in classes that wish
to associate state with a thread (e.g., a user ID or Transaction ID).
</code></pre><p> API表达了下面几种观点：</p>
<p>   1、ThreadLocal不是线程，是用来提供线程内部的局部变量，你可以先简单理解为线程类的属性变量。</p>
<p>   2、多线程环境中每个线程有自己的ThreadLocal的变量‘拷贝’，（通过get或set方法访问）时能保证各个线程里的变量线程相对独立于其他线程内的变量，修改本线程局部变量不影响其他线程中的局部变量。</p>
<p>   3、ThreadLocal实例通常来说都是private static类型。 </p>
<p><strong>小结：</strong></p>
<p>1、每个线程都有自己的局部变量</p>
<p>   &emsp;&nbsp;&nbsp;每个线程都有一个独立于其他线程的上下文来保存这个变量，一个线程的本地变量对其他线程是不可见的（有前提，后面解释）</p>
<p>2、独立于变量的初始化副本</p>
<p>   &emsp;&nbsp;&nbsp;ThreadLocal可以给一个初始值，而每个线程都会获得这个初始化值的一个副本，这样才能保证不同的线程都有一份拷贝。</p>
<p>3、状态与某一个线程相关联</p>
<p>   &emsp;&nbsp;&nbsp;ThreadLocal 不是用于解决共享变量的问题的，不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制，理解这点对正确使用ThreadLocal至关重要。</p>
<blockquote>
<p>ThreadLocal适用于资源共享但不需要维护状态的情况，也就是一个线程对资源的修改，不影响另一个线程的运行；这种设计是“空间换时间”，synchronized顺序执行是“时间换取空间”。</p>
<p>ThreadLocal的主要应用场景为按线程多实例（每个线程对应一个实例）的对象的访问，并且这个对象很多地方都要用到。例如：同一个网站登录用户，每个用户服务器会为其开一个线程，每个线程中创建一个ThreadLocal，里面存用户基本信息等，在很多页面跳转时，会显示用户信息或者得到用户的一些信息等频繁操作，这样多线程之间并没有联系而且当前线程也可以及时获取想要的数据。</p>
</blockquote>
<h3 id="ThreadLocal实现原理"><a href="#ThreadLocal实现原理" class="headerlink" title="ThreadLocal实现原理"></a>ThreadLocal实现原理</h3><p>ThreadLocal可以看做是一个容器，容器里面存放着属于当前线程的变量。ThreadLocal类提供了四个对外开放的接口方法，这也是用户操作ThreadLocal类的基本方法： </p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">T</td>
<td style="text-align:left">get()&emsp;返回此线程局部变量的当前线程副本中的值。</td>
</tr>
<tr>
<td style="text-align:left">protected T</td>
<td style="text-align:left">initialValue()&emsp;返回此线程局部变量的当前线程的“初始值”。</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">remove()&emsp;移除此线程局部变量当前线程的值。</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">set(T value)&emsp;将此线程局部变量的当前线程副本中的值设置为指定值。</td>
</tr>
</tbody>
</table>
<p>可以通过上述的几个方法实现ThreadLocal中变量的访问，数据设置，初始化以及删除局部变量，那ThreadLocal内部是如何为每一个线程维护变量副本的呢？</p>
<p>其实在ThreadLocal类中有一个静态内部类ThreadLocalMap(其类似于Map)，用键值对的形式存储每一个线程的变量副本，ThreadLocalMap中元素的key为当前ThreadLocal对象，而value对应线程的变量副本，每个线程可能存在多个ThreadLocal。</p>
<p>ThreadLocal类源代码：</p>
<pre><code>/**
 * Returns the value in the current thread&apos;s copy of this
 * thread-local variable.  If the variable has no value for thecurrent thread, it is first initialized to the
 * value returned by an invocation of the {@link #initialValue} method.
 * @return the current thread&apos;s value of this thread-local
 */
public T get() {
    Thread t = Thread.currentThread();//当前线程
    ThreadLocalMap map = getMap(t);//获取当前线程对应的ThreadLocalMap
    if (map != null) {
        ThreadLocalMap.Entry e = map.getEntry(this);//获取对应ThreadLocal的变量值
        if (e != null) {
            @SuppressWarnings(&quot;unchecked&quot;)
            T result = (T)e.value;
            return result;
        }
    }
    return setInitialValue();//若当前线程还未创建ThreadLocalMap，则返回调用此方法并在其中调用createMap方法进行创建并返回初始值。
}

//设置变量的值
public void set(T value) {
   Thread t = Thread.currentThread();
   ThreadLocalMap map = getMap(t);
   if (map != null)
       map.set(this, value);
   else
       createMap(t, value);
}

private T setInitialValue() {
   T value = initialValue();
   Thread t = Thread.currentThread();
   ThreadLocalMap map = getMap(t);
   if (map != null)
       map.set(this, value);
   else
       createMap(t, value);
   return value;
}

/**
 * 为当前线程创建一个ThreadLocalMap的threadlocals,并将第一个值存入到当前map中
 * @param t the current thread
 * @param firstValue value for the initial entry of the map
 */
void createMap(Thread t, T firstValue) {
    t.threadLocals = new ThreadLocalMap(this, firstValue);
}

//删除当前线程中ThreadLocalMap对应的ThreadLocal
public void remove() {
       ThreadLocalMap m = getMap(Thread.currentThread());
       if (m != null)
           m.remove(this);
}
</code></pre><p>上述是在ThreadLocal类中的几个主要的方法，他们的核心都是对其内部类ThreadLocalMap进行操作，下面看一下该类的源代码：</p>
<pre><code>static class ThreadLocalMap {
    //map中的每个节点Entry,其键key是ThreadLocal并且还是弱引用，这也导致了后续会产生内存泄漏问题的原因。
     static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {
        /** The value associated with this ThreadLocal. */
        Object value;

        Entry(ThreadLocal&lt;?&gt; k, Object v) {
            super(k);
            value = v;
        }
    }
    /**
     * 初始化容量为16，以为对其扩充也必须是2的指数 
     */
    private static final int INITIAL_CAPACITY = 16;
    /**
     * 真正用于存储线程的每个ThreadLocal的数组，将ThreadLocal和其对应的值包装为一个Entry。
     */
    private Entry[] table;


    ///....其他的方法和操作都和map的类似
}
</code></pre><p>总之，为不同线程创建不同的ThreadLocalMap，用线程本身为区分点，每个线程之间其实没有任何的联系，说是说存放了变量的副本，其实可以理解为为每个线程单独new了一个对象。</p>
<h3 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h3><p>在上面提到过，每个thread中都存在一个map，map的类型是ThreadLocal.ThreadLocalMap。Map中的key为一个threadlocal实例。这个Map的确使用了弱引用，不过弱引用只是针对key。每个key都弱引用指向threadlocal。当把threadlocal实例置为null以后，没有任何强引用指向threadlocal实例，所以threadlocal将会被gc回收。但是，我们的value却不能回收，因为存在一条从current thread连接过来的强引用。只有当前thread结束以后，current thread就不会存在栈中，强引用断开，Current Thread，Map，value将全部被GC回收。</p>
<p>所以得出一个结论就是只要这个线程对象被gc回收，就不会出现内存泄露，但在threadLocal设为null和线程结束这段时间不会被回收的，就发生了我们认为的内存泄露。其实这是一个对概念理解的不一致，也没什么好争论的。最要命的是线程对象不被回收的情况，这就发生了真正意义上的内存泄露。比如使用线程池的时候，线程结束是不会销毁的，会再次使用的。就可能出现内存泄露。</p>
<p>虽然ThreadLocalMap已经使用了weakReference，但是还是建议能够显示的使用remove方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ThreadLocal概述&quot;&gt;&lt;a href=&quot;#ThreadLocal概述&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal概述&quot;&gt;&lt;/a&gt;ThreadLocal概述&lt;/h3&gt;&lt;p&gt;学习一个东西首先要知道为什么要引入它，就是我们能用它
    
    </summary>
    
      <category term="java基础" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="https://algernoonliu.github.io/categories/java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://algernoonliu.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="ThreadLocal" scheme="https://algernoonliu.github.io/tags/ThreadLocal/"/>
    
  </entry>
  
</feed>
